{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.ezladder",
	"name": "EZ Ladder ST",
	"patterns": [
	  {
		"include": "#comments"
	  },
	  {
		"include": "#strings"
	  },
	  {
		"include": "#keywords"
	  },
	  {
		"include": "#operators"
	  },
	  {
		"include": "#built-in-functions"
	  },
	  {
		"include": "#variables-outputs"
	  },
	  {
		"include": "#constants"
	  },
	  {
		"include": "#types-structs"
	  },
	  {
		"include": "#functions"
	  }
	],
	"repository": {
	  "comments": {
		"patterns": [
		  {
			"name": "comment.block.ezladder",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
			  {
				"name": "comment.block.ezladder",
				"match": "\\(\\*|\\*\\)"
			  }
			]
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"name": "string.quoted.double.ezladder",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  {
				"name": "constant.character.escape.ezladder",
				"match": "\\\\."
			  }
			]
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.control.ezladder",
			"match": "\\b(IF|THEN|ELSE|FOR|WHILE|DO|END_IF|END_FOR|END_WHILE|FUNCTION|FUNCTION_BLOCK|VAR|VAR_INPUT|VAR_OUTPUT|VAR_EXTERNAL|VAR_TEMP|CONST|TYPE|END_TYPE)\\b"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.ezladder",
			"match": "(\\+|\\-|\\*|\\/|AND\\b|OR\\b|NOT\\b|XOR\\b|<>|<=|>=|<|>|=)"
		  }
		]
	  },
	  "built-in-functions": {
		"patterns": [
		  {
			"name": "support.function.builtin.ezladder",
			"match": "\\b(ABS|MAX|MIN|LN|EXP|SIN|COS|CONCAT|LEFT|RIGHT|LEN|INT_TO_STRING|REAL_TO_INT|STRING_TO_INT)\\b"
		  }
		]
	  },
	  "variables-outputs": {
		"patterns": [
		  {
			"name": "variable.output.ezladder",
			"match": "\\b(M\\d+|L\\d+|Flt)\\b"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"name": "constant.numeric.ezladder",
			"match": "\\b(0x[0-9A-Fa-f]+|0b[01]+|\\d+\\.\\d+|\\d+)\\b"
		  },
		  {
			"name": "constant.other.boolean.ezladder",
			"match": "\\b(TRUE|FALSE)\\b"
		  }
		]
	  },
	  "types-structs": {
		"patterns": [
		  {
			"name": "storage.type.ezladder",
			"match": "\\b(TYPE|END_TYPE)\\b"
		  },
		  {
			"name": "keyword.declaration.ezladder",
			"match": "\\b(struct|end_struct|RECORD|END_RECORD)\\b"
		  },
		  {
			"name": "variable.member.ezladder",
			"match": "\\b\\w+\\.\\w+\\b"
		  }
		]
	  },
	  "functions": {
		"patterns": [
		  {
			"name": "entity.name.function.ezladder",
			"match": "\\b(FUNCTION|END_FUNCTION|FUNCTION_BLOCK|END_FUNCTION_BLOCK)\\b"
		  },
		  {
			"name": "meta.function-call.ezladder",
			"match": "\\b\\w+(?=\\()"
		  }
		]
	  }
	},
	"injectionSelector": "L:source.ezladder"
  }
  